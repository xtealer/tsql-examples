
-- Crear nueva base de datos llamada MATRICULAS
CREATE DATABASE MATRICULAS;
GO


-- Seleccionar la base de datos recien creada
USE MATRICULAS;
GO


-- Creacion de tablas en base de datos
-- Tabla de CATEGORIAS
CREATE TABLE CATEGORIAS (CATEG INT PRIMARY KEY, PAGOHORA INT, DESCRIPCION VARCHAR(15));
GO

-- Tabla de PROFESORES
CREATE TABLE PROFESORES (CODPROFE INT PRIMARY KEY, NOMBRE VARCHAR(20),
APELLIDO VARCHAR(20), CATEG INT, CONSTRAINT FK_categ FOREIGN KEY(CATEG) REFERENCES CATEGORIAS(CATEG)
ON DELETE SET NULL);
GO

-- Tabla de SECCIONES
CREATE TABLE SECCIONES (SEC INT PRIMARY KEY,
CODPROFE INT, INICIO DATE, PENSION DECIMAL(5, 2), VACANTES INT,
NUMHORAS INT, CONSTRAINT FK_codprofe FOREIGN KEY(CODPROFE) REFERENCES PROFESORES(CODPROFE)
ON DELETE SET NULL);
GO

-- Tabla de ALUMNOS
CREATE TABLE ALUMNOS (CODALU VARCHAR(15) PRIMARY KEY, NOMBRE VARCHAR(20),
APELLIDO VARCHAR(20), PROM DECIMAL(4, 2), MAT VARCHAR(8));
GO
ALTER TABLE ALUMNOS ADD CONSTRAINT df_prom DEFAULT 0.00 FOR PROM;
GO
ALTER TABLE ALUMNOS ADD CONSTRAINT df_mat DEFAULT 'NO' FOR MAT;
GO

-- Tabla de INSCRITOS
CREATE TABLE INSCRITOS (CODALU VARCHAR(15), SEC INT, ACTIVO VARCHAR(2),
PRIMARY KEY(CODALU, SEC), CONSTRAINT FK_sec FOREIGN KEY(SEC) REFERENCES SECCIONES(SEC) ON DELETE CASCADE,
CONSTRAINT FK_codalu FOREIGN KEY(CODALU) REFERENCES ALUMNOS(CODALU) ON DELETE CASCADE);
GO

-- Tabla de CALIFICACIONES
CREATE TABLE CALIFICACIONES (CODALU VARCHAR(15), SEC INT,
PRIMARY KEY(CODALU, SEC), ASIGN DECIMAL(4, 2), PARCIALES DECIMAL(4, 2), FINAL DECIMAL(4, 2), CONSTRAINT FK_se FOREIGN KEY(SEC) REFERENCES SECCIONES(SEC) ON DELETE CASCADE,
CONSTRAINT FK_codal FOREIGN KEY(CODALU) REFERENCES ALUMNOS(CODALU) ON DELETE CASCADE);
GO
ALTER TABLE CALIFICACIONES ADD CONSTRAINT df_asign DEFAULT 0.00 FOR ASIGN;
GO
ALTER TABLE CALIFICACIONES ADD CONSTRAINT df_par DEFAULT 0.00 FOR PARCIALES;
GO
ALTER TABLE CALIFICACIONES ADD CONSTRAINT df_final DEFAULT 0.00 FOR FINAL;
GO


-- TABLAS EXISTENTES
SELECT TABLE_NAME FROM MATRICULAS.INFORMATION_SCHEMA.TABLES;
GO


-- INSERT OPERATIONS
INSERT INTO CATEGORIAS VALUES(1, 50);
GO
INSERT INTO CATEGORIAS VALUES(2, 80);
GO
INSERT INTO CATEGORIAS VALUES(3, 100);
GO


-- PROCEDIMIENTOS
-- AGREGAR PROFESOR
CREATE PROCEDURE sp_NuevoProfesor (
@codprof INT, @nombre VARCHAR(20), @apellido VARCHAR(20), @categ INT
) AS
BEGIN
	DECLARE @codproftemp INT;
	BEGIN TRANSACTION
		SELECT @codproftemp = (SELECT CODPROFE FROM PROFESORES WHERE CODPROFE = @codprof)
		IF @codproftemp = @codprof
		BEGIN
				RAISERROR('El Codigo de PROFESOR ya se esta utilizando!', 10, 1);
				ROLLBACK TRANSACTION;
		END;
		ELSE
		BEGIN
			INSERT INTO PROFESORES VALUES(@codprof, @nombre, @apellido, @categ);
			COMMIT TRANSACTION;
		END;
END;
GO

-- AGREGAR ALUMNO
CREATE PROCEDURE sp_NuevoAlumno (
@codalu VARCHAR(15), @nombre VARCHAR(20), @apellido VARCHAR(20)
) AS
BEGIN
	DECLARE @codalutemp VARCHAR(15);
	BEGIN TRANSACTION
		SELECT @codalutemp = (SELECT CODALU FROM ALUMNOS WHERE CODALU = @codalu)
		IF @codalutemp = @codalu
		BEGIN
				RAISERROR('El Codigo de ALUMNO ya se esta utilizando!', 10, 1);
				ROLLBACK TRANSACTION;
		END;
		ELSE
		BEGIN
			INSERT INTO ALUMNOS (CODALU, NOMBRE, APELLIDO) VALUES(@codalu, @nombre, @apellido);
			COMMIT TRANSACTION;
		END;
END;
GO

-- AGREGAR SECCION
CREATE PROCEDURE sp_NuevaSeccion (
@codsec INT, @vac INT, @horas INT
) AS
BEGIN
	DECLARE @codsectemp INT;
	BEGIN TRANSACTION
		SELECT @codsectemp = (SELECT SEC FROM SECCIONES WHERE SEC = @codsec)
		IF @codsectemp = @codsec
		BEGIN
				RAISERROR('La SECCION ya existe!', 10, 1);
				ROLLBACK TRANSACTION;
		END;
		ELSE
		BEGIN
			INSERT INTO SECCIONES (SEC, VACANTES, NUMHORAS) VALUES(@codsec, @vac, @horas);
			COMMIT TRANSACTION;
		END;
END;
GO

-- INICIALIZAR SECCION
CREATE PROCEDURE up_IniciarSeccion (@codsec INT,
@codprof INT, @inicio DATE, @pension DECIMAL(5,2)
) AS
BEGIN
	DECLARE @codsectemp INT;
	DECLARE @codproftemp INT;
	BEGIN TRANSACTION
		SELECT @codsectemp = (SELECT SEC FROM SECCIONES WHERE SEC = @codsec);
		SELECT @codproftemp = (SELECT CODPROFE FROM PROFESORES WHERE CODPROFE = @codprof);
		IF @codsectemp = @codsec
			IF @codproftemp = @codprof
				BEGIN
						UPDATE SECCIONES SET CODPROFE = @codprof, INICIO = @inicio, PENSION = @pension WHERE SEC = @codsec;
						COMMIT TRANSACTION;
				END;
			ELSE
			BEGIN
				RAISERROR('El CODIGO DE PROFESOR no existe!', 10, 1);
				ROLLBACK TRANSACTION;
			END;
		ELSE
		BEGIN
			RAISERROR('La SECCION no existe!', 10, 1);
			ROLLBACK TRANSACTION;
		END;
END;
GO

-- INSCRIBIR ALUMNO
CREATE PROCEDURE sp_InscribirAlumno (
@codalu VARCHAR(15), @codsec INT
) AS
BEGIN
	DECLARE @codsectemp INT;
	DECLARE @codalutemp VARCHAR(15);
	DECLARE @activo VARCHAR(2);
	DECLARE @vacantes SMALLINT;
	BEGIN TRANSACTION
		SELECT @codalutemp = (SELECT CODALU FROM ALUMNOS WHERE CODALU = @codalu);
		IF @codalutemp IS NOT NULL
		BEGIN
			SELECT @codsectemp = (SELECT SEC FROM SECCIONES WHERE SEC = @codsec);
			IF @codsectemp IS NOT NULL
			BEGIN
				SELECT @vacantes = (SELECT VACANTES FROM SECCIONES WHERE SEC = @codsec);
				IF @vacantes > 0
				BEGIN
					SELECT @activo = (SELECT ACTIVO FROM INSCRITOS WHERE SEC = @codsec AND CODALU = @codalu);
					IF @activo = 'SI'
					BEGIN
						RAISERROR('El CODIGO DE ALUMNO ya esta inscrito!', 10, 1);
						ROLLBACK TRANSACTION;
					END;
					ELSE IF @activo = 'NO'
					BEGIN
						UPDATE INSCRITOS SET ACTIVO = 'SI' WHERE SEC = @codsec AND CODALU = @codalu;
						UPDATE ALUMNOS SET MAT = 'SI' WHERE CODALU = @codalu;
						COMMIT TRANSACTION;
					END;
					ELSE
					BEGIN
						INSERT INTO INSCRITOS VALUES(@codalu, @codsec, 'SI');
						UPDATE ALUMNOS SET MAT = 'SI' WHERE CODALU = @codalu;
						COMMIT TRANSACTION;
					END;
				END;
				ELSE
				BEGIN
					RAISERROR('No hay VACANTES disponibles!', 10, 1);
					ROLLBACK TRANSACTION;
				END;
			END;
			ELSE
			BEGIN
				RAISERROR('La SECCION no existe!', 10, 1);
				ROLLBACK TRANSACTION;
			END;
		END;
		ELSE
		BEGIN
			RAISERROR('El CODIGO DE ALUMNO no existe!', 10, 1);
			ROLLBACK TRANSACTION;
		END;
	END;
GO

-- ELIMINAR SECCION
CREATE PROCEDURE dp_EliminarSeccion (@codsec INT) AS
BEGIN
	DECLARE @codsectemp int;
	SELECT @codsectemp = (SELECT SEC FROM SECCIONES WHERE SEC = @codsec);
	BEGIN TRANSACTION
	IF @codsectemp IS NOT NULL
	BEGIN
		DELETE FROM SECCIONES WHERE SEC = @codsec;
		COMMIT TRANSACTION;
	END;
	ELSE
	BEGIN
		RAISERROR('la SECCION no existe!', 10, 1);
		ROLLBACK TRANSACTION;
	END;
END;
GO

-- BORRAR ALUMNO
CREATE PROCEDURE dp_BorrarAlumno (@codalu VARCHAR(15)) AS
BEGIN
	DECLARE @codalutemp VARCHAR(15);
	SELECT @codalutemp = (SELECT CODALU FROM ALUMNOS WHERE CODALU = @codalu);
	BEGIN TRANSACTION
	IF @codalutemp IS NOT NULL
	BEGIN
		DELETE FROM ALUMNOS WHERE CODALU = @codalu;
		COMMIT TRANSACTION;
	END;
	ELSE
	BEGIN
		RAISERROR('El ALUMNO no existe!', 10, 1);
		ROLLBACK TRANSACTION;
	END;
END;
GO

-- BORRAR PROFESOR
CREATE PROCEDURE dp_BorrarProfesor (@codprof INT) AS
BEGIN
	DECLARE @codproftemp INT;
	SELECT @codproftemp = (SELECT CODPROFE FROM PROFESORES WHERE CODPROFE = @codprof);
	BEGIN TRANSACTION
	IF @codproftemp IS NOT NULL
	BEGIN
		DELETE FROM PROFESORES WHERE CODPROFE = @codprof;
		COMMIT TRANSACTION;
	END;
	ELSE
	BEGIN
		RAISERROR('El PROFESOR no existe!', 10, 1);
		ROLLBACK TRANSACTION;
	END;
END;
GO

-- BORRAR SECCION
CREATE PROCEDURE dp_BorrarSeccion (@codsec INT) AS
BEGIN
	DECLARE @codsectemp INT;
	SELECT @codsectemp = (SELECT SEC FROM SECCIONES WHERE SEC = @codsec);
	BEGIN TRANSACTION
	IF @codsectemp IS NOT NULL
	BEGIN
		DELETE FROM SECCIONES WHERE SEC = @codsec;
	END;
	ELSE
	BEGIN
		RAISERROR('La SECCION no existe!', 10, 1);
		ROLLBACK TRANSACTION;
	END;
END;
GO

-- INFORMACION GENERAL PROFESOR
ALTER PROCEDURE fp_InformacionProfesor (@codprof INT) AS
BEGIN
	DECLARE @codproftemp INT;
	SELECT @codproftemp = (SELECT CODPROFE FROM PROFESORES WHERE CODPROFE = @codprof);
	BEGIN TRANSACTION
	IF @codproftemp IS NOT NULL
	BEGIN
		SELECT P.CODPROFE, P.NOMBRE, P.APELLIDO, P.CATEG,
		C.PAGOHORA * S.NUMHORAS AS SALARIO,
		C.DESCRIPCION FROM PROFESORES AS P, CATEGORIAS AS C, SECCIONES AS S
		WHERE C.CATEG = P.CATEG AND P.CODPROFE = @codprof AND S.CODPROFE = @codprof;
		COMMIT TRANSACTION;
	END;
	ELSE
	BEGIN
		RAISERROR('El CODIGO DE PROFESOR no existe!', 10, 1);
		ROLLBACK TRANSACTION;
	END;
END;
GO

-- INFORMACION GENERAL ALUMNO by ALUMNO ID
ALTER PROCEDURE fp_InformacionAlumno (@codalu VARCHAR(15)) AS
BEGIN
	DECLARE @codalutemp VARCHAR(15);
	SELECT @codalutemp = (SELECT CODALU FROM ALUMNOS WHERE CODALU = @codalu);
	BEGIN TRANSACTION
	IF @codalutemp IS NOT NULL
	BEGIN
		SELECT A.CODALU, I.SEC, S.NOMBRESEC, A.NOMBRE, A.APELLIDO, A.MAT, A.PROM FROM ALUMNOS AS A
		LEFT JOIN INSCRITOS AS I ON I.CODALU = @codalu
		LEFT JOIN SECCIONES AS S ON S.SEC = I.SEC
		WHERE A.CODALU = @codalu;
		COMMIT TRANSACTION;
	END;
	ELSE
	BEGIN
		RAISERROR('El CODIGO DE ALUMNO no existe!', 10, 1);
		ROLLBACK TRANSACTION;
	END;
END;
GO

-- VER INFORMACION DE TODOS LOS ALUMNOS
CREATE PROCEDURE fp_VerAlumnos AS
BEGIN
	SELECT A.CODALU, I.SEC, S.NOMBRESEC, A.NOMBRE, A.APELLIDO, A.MAT, A.PROM FROM 
	ALUMNOS AS A LEFT JOIN INSCRITOS AS I ON A.CODALU = I.CODALU
	LEFT JOIN SECCIONES AS S ON S.SEC = I.SEC;
END;
GO

-- VER ALUMNOS CON 3 O MAS CURSOS APROBADOS
CREATE PROCEDURE fp_CursosAprobados3Mas AS
BEGIN
	SELECT A.CODALU, I.SEC, S.NOMBRESEC, A.NOMBRE, A.APELLIDO, A.MAT, A.PROM FROM 
	ALUMNOS AS A INNER JOIN INSCRITOS AS I ON A.CODALU = I.CODALU
	INNER JOIN SECCIONES AS S ON S.SEC = I.SEC WHERE (SELECT
	COUNT(C.CODALU) FROM CALIFICACIONES AS C WHERE C.CODALU = A.CODALU AND C.PROMEDIO >= 14.00) >= 3;
END;
GO

-- ENCONTRAR ALUMNOS CON PROMEDIO MAYOR O IGUAL A 14.00
CREATE PROCEDURE fp_PromedioMayor14 AS
BEGIN
	SELECT A.CODALU AS 'COD ALUMNO', I.SEC AS 'COD SECCION',
	P.NOMBRE + ' ' + P.APELLIDO AS 'PROFESOR',
	S.NOMBRESEC AS 'SECCION', A.NOMBRE + ' ' + A.APELLIDO AS 'NOMBRE ALUMNO', A.MAT, A.PROM FROM 
	ALUMNOS AS A INNER JOIN INSCRITOS AS I ON A.CODALU = I.CODALU
	INNER JOIN SECCIONES AS S ON S.SEC = I.SEC
	INNER JOIN PROFESORES AS P ON P.CODPROFE = S.CODPROFE 
	WHERE A.PROM >= 14.00;
END;
GO

-- CONTAR ALUMNOS INSCRITOS EN CADA SECCION
CREATE PROCEDURE fp_NumeroAlumnoSeccion AS 
BEGIN
	SELECT COUNT(I.CODALU) AS '# DE ALUMNOS', I.SEC FROM INSCRITOS AS I
	WHERE I.ACTIVO = 'SI' GROUP BY I.SEC;
END;
GO

-- CAMBIO DE SECCION ALUMNO
CREATE PROCEDURE up_CambioSeccionAlumno (@codalu VARCHAR(15), @codsecnew INT) AS
BEGIN
	DECLARE @codalutemp VARCHAR(15);
	DECLARE @codsectemp INT;
	DECLARE @activo VARCHAR(2);
	SELECT @codalutemp = (SELECT A.CODALU FROM ALUMNOS AS A WHERE A.CODALU = @codalu);
	BEGIN TRANSACTION
	IF @codalutemp IS NOT NULL
	BEGIN
		SELECT @codsectemp = (SELECT S.SEC FROM SECCIONES AS S WHERE S.SEC = @codsecnew);
		IF @codsectemp IS NOT NULL
		BEGIN
			SELECT @activo = (SELECT I.ACTIVO FROM INSCRITOS AS I WHERE I.CODALU = @codalu);
			IF @activo = 'SI'
			BEGIN
				UPDATE INSCRITOS SET SEC = @codsecnew WHERE CODALU = @codalu;
				UPDATE CALIFICACIONES SET SEC = @codsecnew WHERE CODALU = @codalu;
				COMMIT TRANSACTION;
			END;
			ELSE IF @activo = 'NO' OR @activo = NULL
			BEGIN
				RAISERROR('El ALUMNO no esta inscrito!', 10, 1);
				ROLLBACK TRANSACTION;
			END;
		END;
		ELSE
		BEGIN
			RAISERROR('El CODIGO DE SECCION no existe!', 10, 1);
			ROLLBACK TRANSACTION;
		END;
	END;
	ELSE
	BEGIN
		RAISERROR('El CODIGO DE ALUMNO no existe!', 10, 1);
		ROLLBACK TRANSACTION;
	END;
END;
GO

-- CAMBIO DE SECCION PROFESOR
CREATE PROCEDURE up_CambioSeccionProfesor (@codprof INT, @codsecnew INT) AS
BEGIN
	DECLARE @codproftemp INT;
	SELECT @codproftemp = (SELECT P.CODPROFE FROM PROFESORES AS P WHERE P.CODPROFE = @codprof);
	DECLARE @codsectemp INT;
	BEGIN TRANSACTION
	IF @codproftemp IS NOT NULL
	BEGIN
		SELECT @codsectemp = (SELECT S.SEC FROM SECCIONES AS S WHERE S.SEC = @codsecnew);
		IF @codsectemp IS NOT NULL
		BEGIN
			UPDATE SECCIONES SET SEC = @codsecnew WHERE CODPROFE = @codprof;
			COMMIT TRANSACTION;
		END;
		ELSE
		BEGIN
			RAISERROR('El CODIGO DE SECCION no existe!', 10, 1);
			ROLLBACK TRANSACTION;
		END;
	END;
	ELSE
	BEGIN
		RAISERROR('El CODIGO DE PROFESOR no existe!', 10, 1);
		ROLLBACK TRANSACTION;
	END;
END;
GO

-- ACTUALIZAR NOTAS
CREATE PROCEDURE up_CargarNotas (@codalu VARCHAR(15), @asig DECIMAL(4, 2), @par DECIMAL(4, 2), @final DECIMAL(4, 2)) AS
BEGIN
	DECLARE @codalutemp VARCHAR(15);
	DECLARE @codsec INT;
	SELECT @codalutemp = (SELECT CODALU FROM ALUMNOS WHERE CODALU = @codalu);
	BEGIN TRANSACTION
	IF @codalutemp IS NOT NULL
	BEGIN
		SELECT @codsec = (SELECT SEC FROM INSCRITOS WHERE CODALU = @codalu AND ACTIVO = 'SI');
		IF @codsec IS NOT NULL
		BEGIN
			UPDATE CALIFICACIONES SET ASIGN = @asig, PARCIALES = @par, FINAL = @final, PROMEDIO = (@asig + @par + @final) / 3
			WHERE CODALU = @codalu AND SEC = @codsec;
			COMMIT TRANSACTION;
		END;
		ELSE
		BEGIN
			RAISERROR('EL ALUMNO NO ESTA MATRICULADO!', 10, 1);
			ROLLBACK TRANSACTION;
		END;
	END;
	ELSE
	BEGIN
		RAISERROR('El CODIGO DE ALUMNO no existe!', 10, 1);
		ROLLBACK TRANSACTION;
	END;
END;
GO

--LLAMADA A PROCEDIMIENTOS
EXEC sp_NuevoProfesor 106, 'John', 'Espino', 2;
GO
EXEC sp_NuevoAlumno '4', 'Pavito', 'Rivas';
GO
EXEC sp_NuevaSeccion 4002, 20, 150;
GO
EXEC up_IniciarSeccion 4002, 106, '2019-10-03', 120.50;
GO
EXEC sp_InscribirAlumno '4', 4001;
GO
EXEC dp_EliminarSeccion 4002;
GO
EXEC dp_BorrarAlumno '1';
GO
EXEC dp_BorrarProfesor 0;
GO
EXEC fp_InformacionProfesor 106;
GO
EXEC fp_InformacionAlumno '3';
GO
EXEC fp_VerAlumnos;
GO
EXEC fp_NumeroAlumnoSeccion;
GO
EXEC up_CambioSeccionAlumno '2' , 4002;
GO
EXEC up_CambioSeccionProfesor 105, 4002;
GO
EXEC up_CargarNotas '2', 15.10, 14.50, 16.90;
GO

-- MODIFY DATA TYPE
ALTER TABLE ALUMNOS ALTER COLUMN PROM DECIMAL(4,2);


-- SELECT OPERATIONS
SELECT * FROM CATEGORIAS;
GO
SELECT * FROM PROFESORES;
GO
SELECT * FROM SECCIONES;
GO
SELECT * FROM ALUMNOS;
GO
SELECT * FROM INSCRITOS;
GO
SELECT * FROM CALIFICACIONES;
GO


-- TRIGGERS
-- CREAR CALIFICACIONES
CREATE TRIGGER CrearCalificacion ON INSCRITOS INSTEAD OF INSERT AS 
BEGIN
	DECLARE @codalutemp VARCHAR(15);
	DECLARE @codsectemp INT;
	SELECT @codalutemp = (SELECT I.CODALU FROM inserted AS I);
	SELECT @codsectemp = (SELECT I.SEC FROM inserted AS I);
	INSERT INTO CALIFICACIONES (CODALU, SEC) VALUES(@codalutemp, @codsectemp);
	UPDATE SECCIONES SET VACANTES = VACANTES - 1 WHERE SEC = @codsectemp;
END;
GO

-- AUMENTAR VACANTES AL BORRAR ALUMNO Y BORRAR CALIFICACIONES
CREATE TRIGGER CompletarBorradoAlumno ON ALUMNOS AFTER DELETE AS
BEGIN
	DECLARE @codalutemp VARCHAR(15);
	DECLARE @codsectemp INT;
	SELECT @codalutemp = (SELECT D.CODALU FROM deleted AS D);
	SELECT @codsectemp = (SELECT I.SEC FROM INSCRITOS AS I WHERE I.CODALU = @codalutemp);
	DELETE FROM CALIFICACIONES WHERE CODALU = @codalutemp AND SEC = @codsectemp;
	DELETE FROM INSCRITOS WHERE CODALU = @codalutemp AND SEC = @codsectemp;
	UPDATE SECCIONES SET VACANTES = VACANTES + 1 WHERE SEC = @codsectemp;
END;
GO

-- ACTUALIZAR CANTIDAD DE VACANTES AL CAMBIAR ESTUDIANTE DE SECCION
CREATE TRIGGER ActualizarVacantesCambio ON INSCRITOS AFTER UPDATE AS
BEGIN
	DECLARE @codsecold INT;
	SELECT @codsecold = (SELECT D.SEC FROM deleted AS D);
	DECLARE @codsecnew INT;
	SELECT @codsecnew = (SELECT I.SEC FROM inserted AS I);
	UPDATE SECCIONES SET VACANTES = VACANTES + 1 WHERE SEC = @codsecold;
	UPDATE SECCIONES SET VACANTES = VACANTES - 1 WHERE SEC = @codsecnew;
END;
GO

-- CALCULAR PROMEDIO DE ESTUDIANTE AL INSERTAR NOTAS
ALTER TRIGGER CalcularPromedio ON CALIFICACIONES AFTER UPDATE AS
BEGIN
	DECLARE @courses INT;
	DECLARE @codalu VARCHAR(15);
	SELECT @codalu = (SELECT I.CODALU FROM inserted AS I);
	SELECT @courses = (SELECT COUNT(C.PROMEDIO) FROM CALIFICACIONES AS C
	WHERE C.CODALU = @codalu AND C.PROMEDIO > 0.00);
	UPDATE ALUMNOS SET PROM = (SELECT SUM(C.PROMEDIO) / @courses FROM CALIFICACIONES AS C 
	WHERE C.CODALU = @codalu AND C.PROMEDIO > 0.00) WHERE CODALU = @codalu;
END;
GO

-- ELIMINAR NUMERO DE PROFESOR DE SECCION ANTIGUA
CREATE TRIGGER CompletarCambioProfesor ON SECCIONES AFTER UPDATE AS
BEGIN
	DECLARE @codprof INT;
	DECLARE @secnew INT;
	DECLARE @secold INT;
	SELECT @codprof = (SELECT I.CODPROFE FROM inserted AS I);
	SELECT @secnew = (SELECT I.SEC FROM inserted as I);
	SELECT @secold = (SELECT SEC FROM SECCIONES WHERE SEC <> @secnew AND CODPROFE = @codprof);
	IF @secold IS NOT NULL
	BEGIN
		UPDATE SECCIONES SET CODPROFE = NULL WHERE SEC = @secold;
	END;
END;
GO


-- CHECK TABLE DATA TYPES
SELECT M.DATA_TYPE, M.COLUMN_NAME FROM MATRICULAS.INFORMATION_SCHEMA.COLUMNS AS M
WHERE TABLE_NAME = 'CALIFICACIONES';
GO